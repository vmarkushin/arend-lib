\import Data.Foldable
\import Data.List (List)
\import Data.Traversable
\import Meta

\data Scope (F : \Set -> \Set) (A : \Set)
  | scope (F A)


\data Expr (A : \Set) : \Set
  | free A
  | num (n : Int)
  | app (e : Expr A) (args : List (Expr A))
  | lam (s : Scope Expr A)

\instance ExprTrav : Traversable Expr
  | sanity-check-fold => unfold Foldable.foldMapImpl idp
  | sanity-check-foldr => unfold Foldable.foldMapImpl idp
  | sanity-check-foldl => unfold Foldable.foldMapImpl idp
  | C => {?}
  | D => {?}
  | T => {?}
  | Func => {?}
  | Func-id => {?}
  | Func-o => {?}
  | traverse f x => {?} -- \let x' => f (ctx x) \in {?}
